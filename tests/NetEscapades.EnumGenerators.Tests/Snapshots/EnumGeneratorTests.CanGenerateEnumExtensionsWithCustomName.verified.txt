//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the NetEscapades.EnumGenerators source generator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

namespace MyTestNameSpace;

/// <summary>
/// Extension methods for <see cref="global::MyTestNameSpace.MyEnum" />.
/// </summary>
internal static partial class A
{
    /// <summary>
    /// The number of members in the enum.
    /// This is a non-distinct count of defined names.
    /// </summary>
    public const int Length = 2;

    /// <summary>
    /// Returns the string representation of the <see cref="global::MyTestNameSpace.MyEnum"/> value.
    /// If the attribute is decorated with a <c>[Display]</c>/<c>[Description]</c> attribute, then
    /// uses the provided value. Otherwise uses the name of the member, equivalent to
    /// calling <c>ToString()</c> on <paramref name="value"/>.
    /// </summary>
    /// <param name="value">The value to retrieve the string value for.</param>
    /// <returns>The string representation of the value.</returns>
    public static string ToStringFast(this global::MyTestNameSpace.MyEnum value)
        => value switch
        {
            global::MyTestNameSpace.MyEnum.First => nameof(global::MyTestNameSpace.MyEnum.First),
            global::MyTestNameSpace.MyEnum.Second => nameof(global::MyTestNameSpace.MyEnum.Second),
            _ => value.ToString()
        };

    /// <summary>
    /// Returns a boolean telling whether the given enum value exists in the enumeration.
    /// </summary>
    /// <param name="value">The value to check if it's defined.</param>
    /// <returns><see langword="true" /> if the value exists in the enumeration, <see langword="false" /> otherwise.</returns>
    public static bool IsDefined(global::MyTestNameSpace.MyEnum value)
        => value switch
        {
            global::MyTestNameSpace.MyEnum.First => true,
            global::MyTestNameSpace.MyEnum.Second => true,
            _ => false
        };

    /// <summary>
    /// Returns a boolean telling whether an enum with the given name exists in the enumeration.
    /// </summary>
    /// <param name="name">The name to check if it's defined.</param>
    /// <returns><see langword="true" /> if a member with the name exists in the enumeration, <see langword="false" /> otherwise.</returns>
    public static bool IsDefined(string name) => IsDefined(name, false);

    /// <summary>
    /// Returns a boolean telling whether an enum with the given name exists in the enumeration,
    /// or if a member decorated with a <c>[Display]</c>/<c>[Description]</c> attribute
    /// with the required name exists.
    /// </summary>
    /// <param name="name">The name to check if it's defined.</param>
    /// <param name="allowMatchingMetadataAttribute">If <see langword="true" />, considers the value of metadata attributes, otherwise ignores them.</param>
    /// <returns><see langword="true" /> if a member with the name exists in the enumeration, or a member is decorated
    /// with a <c>[Display]</c>/<c>[Description]</c> attribute with the name, <see langword="false" /> otherwise.</returns>
    public static bool IsDefined(string name, bool allowMatchingMetadataAttribute)
    {
        return name switch
        {
            nameof(global::MyTestNameSpace.MyEnum.First) => true,
            nameof(global::MyTestNameSpace.MyEnum.Second) => true,
            _ => false
        };
    }

    /// <summary>
    /// Returns a boolean telling whether an enum with the given name exists in the enumeration.
    /// </summary>
    /// <param name="name">The name to check if it's defined.</param>
    /// <returns><see langword="true" /> if a member with the name exists in the enumeration, <see langword="false" /> otherwise.</returns>
    public static bool IsDefined(in global::System.ReadOnlySpan<char> name) => IsDefined(name, false);

    /// <summary>
    /// Returns a boolean telling whether an enum with the given name exists in the enumeration,
    /// or optionally if a member decorated with a <c>[Display]</c>/<c>[Description]</c> attribute
    /// with the required name exists.
    /// </summary>
    /// <param name="name">The name to check if it's defined.</param>
    /// <param name="allowMatchingMetadataAttribute">If <see langword="true" />, considers the value of metadata attributes, otherwise ignores them.</param>
    /// <returns><see langword="true" /> if a member with the name exists in the enumeration, or a member is decorated
    /// with a <c>[Display]</c>/<c>[Description]</c> attribute with the name, <see langword="false" /> otherwise.</returns>
    public static bool IsDefined(in global::System.ReadOnlySpan<char> name, bool allowMatchingMetadataAttribute)
    {
        return name switch
        {
            var current when global::System.MemoryExtensions.Equals(current, "First".AsSpan(), global::System.StringComparison.Ordinal) => true,
            var current when global::System.MemoryExtensions.Equals(current, "Second".AsSpan(), global::System.StringComparison.Ordinal) => true,
            _ => false
        };
    }

    /// <summary>
    /// Converts the string representation of the name or numeric value of
    /// an <see cref="global::MyTestNameSpace.MyEnum" /> to the equivalent instance.
    /// The return value indicates whether the conversion succeeded.
    /// </summary>
    /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert.</param>
    /// <param name="value">When this method returns, contains an object of type
    /// <see cref="global::MyTestNameSpace.MyEnum" /> whose
    /// value is represented by <paramref name="value"/> if the parse operation succeeds.
    /// If the parse operation fails, contains the default value of the underlying type
    /// of <see cref="global::MyTestNameSpace.MyEnum" />. This parameter is passed uninitialized.</param>
    /// <returns><see langword="true" /> if the value parameter was converted successfully; otherwise, <see langword="false" />.</returns>
    public static bool TryParse(
        [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
        string? name,
        out global::MyTestNameSpace.MyEnum value)
        => TryParse(name, out value, false, false);

    /// <summary>
    /// Converts the string representation of the name or numeric value of
    /// an <see cref="global::MyTestNameSpace.MyEnum" /> to the equivalent instance.
    /// The return value indicates whether the conversion succeeded.
    /// </summary>
    /// <param name="name">The string representation of the enumeration name or underlying value to convert.</param>
    /// <param name="value">When this method returns, contains an object of type
    /// <see cref="global::MyTestNameSpace.MyEnum" /> whose
    /// value is represented by <paramref name="value"/> if the parse operation succeeds.
    /// If the parse operation fails, contains the default value of the underlying type
    /// of <see cref="global::MyTestNameSpace.MyEnum" />. This parameter is passed uninitialized.</param>
    /// <param name="ignoreCase"><see langword="true" /> to read value in case insensitive mode; <see langword="false" /> to read value in case sensitive mode.</param>
    /// <returns><see langword="true" /> if the value parameter was converted successfully; otherwise, <see langword="false" />.</returns>
    public static bool TryParse(
        [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
        string? name,
        out global::MyTestNameSpace.MyEnum value,
        bool ignoreCase)
        => TryParse(name, out value, ignoreCase, false);

    /// <summary>
    /// Converts the string representation of the name or numeric value of
    /// an <see cref="global::MyTestNameSpace.MyEnum" /> to the equivalent instance.
    /// The return value indicates whether the conversion succeeded.
    /// </summary>
    /// <param name="name">The string representation of the enumeration name or underlying value to convert.</param>
    /// <param name="value">When this method returns, contains an object of type
    /// <see cref="global::MyTestNameSpace.MyEnum" /> whose
    /// value is represented by <paramref name="value"/> if the parse operation succeeds.
    /// If the parse operation fails, contains the default value of the underlying type
    /// of <see cref="global::MyTestNameSpace.MyEnum" />. This parameter is passed uninitialized.</param>
    /// <param name="ignoreCase"><see langword="true" /> to read value in case insensitive mode; <see langword="false" /> to read value in case sensitive mode.</param>
    /// <param name="allowMatchingMetadataAttribute">If <see langword="true" />, considers the value included in metadata attributes such as
    /// <c>[Display]</c>/<c>[Description]</c> attribute when parsing, otherwise only considers the member names.</param>
    /// <returns><see langword="true" /> if the value parameter was converted successfully; otherwise, <see langword="false" />.</returns>
    public static bool TryParse(
        [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
        string? name,
        out global::MyTestNameSpace.MyEnum value,
        bool ignoreCase,
        bool allowMatchingMetadataAttribute)
    {
        if (ignoreCase)
        {
            switch (name)
            {
                case not null when name.Equals(nameof(global::MyTestNameSpace.MyEnum.First), global::System.StringComparison.OrdinalIgnoreCase):
                    value = global::MyTestNameSpace.MyEnum.First;
                    return true;
                case not null when name.Equals(nameof(global::MyTestNameSpace.MyEnum.Second), global::System.StringComparison.OrdinalIgnoreCase):
                    value = global::MyTestNameSpace.MyEnum.Second;
                    return true;
                case { Length: > 0 } when int.TryParse(name, out var val):
                    value = (global::MyTestNameSpace.MyEnum)val;
                    return true;
                default:
                    value = default;
                    return false;
            }
        }

        switch (name)
        {
            case nameof(global::MyTestNameSpace.MyEnum.First):
                value = global::MyTestNameSpace.MyEnum.First;
                return true;
            case nameof(global::MyTestNameSpace.MyEnum.Second):
                value = global::MyTestNameSpace.MyEnum.Second;
                return true;
            case { Length: > 0 } when int.TryParse(name, out var val):
                value = (global::MyTestNameSpace.MyEnum)val;
                return true;
            default:
                value = default;
                return false;
        }
    }

    /// <summary>
    /// Converts the span representation of the name or numeric value of
    /// an <see cref="global::MyTestNameSpace.MyEnum" /> to the equivalent instance.
    /// The return value indicates whether the conversion succeeded.
    /// </summary>
    /// <param name="name">The span representation of the enumeration name or underlying value to convert.</param>
    /// <param name="value">When this method returns, contains an object of type
    /// <see cref="global::MyTestNameSpace.MyEnum" /> whose
    /// value is represented by <paramref name="value"/> if the parse operation succeeds.
    /// If the parse operation fails, contains the default value of the underlying type
    /// of <see cref="global::MyTestNameSpace.MyEnum" />. This parameter is passed uninitialized.</param>
    /// <returns><see langword="true" /> if the value parameter was converted successfully; otherwise, <see langword="false" />.</returns>
    public static bool TryParse(
        in global::System.ReadOnlySpan<char> name,
        out global::MyTestNameSpace.MyEnum value)
        => TryParse(name, out value, false, false);

    /// <summary>
    /// Converts the span representation of the name or numeric value of
    /// an <see cref="global::MyTestNameSpace.MyEnum" /> to the equivalent instance.
    /// The return value indicates whether the conversion succeeded.
    /// </summary>
    /// <param name="name">The span representation of the enumeration name or underlying value to convert.</param>
    /// <param name="value">When this method returns, contains an object of type
    /// <see cref="global::MyTestNameSpace.MyEnum" /> whose
    /// value is represented by <paramref name="value"/> if the parse operation succeeds.
    /// If the parse operation fails, contains the default value of the underlying type
    /// of <see cref="global::MyTestNameSpace.MyEnum" />. This parameter is passed uninitialized.</param>
    /// <param name="ignoreCase"><see langword="true" /> to read value in case insensitive mode; <see langword="false" /> to read value in case sensitive mode.</param>
    /// <returns><see langword="true" /> if the value parameter was converted successfully; otherwise, <see langword="false" />.</returns>
    public static bool TryParse(
        in global::System.ReadOnlySpan<char> name,
        out global::MyTestNameSpace.MyEnum value,
        bool ignoreCase)
        => TryParse(name, out value, ignoreCase, false);

    /// <summary>
    /// Converts the span representation of the name or numeric value of
    /// an <see cref="global::MyTestNameSpace.MyEnum" /> to the equivalent instance.
    /// The return value indicates whether the conversion succeeded.
    /// </summary>
    /// <param name="name">The span representation of the enumeration name or underlying value to convert.</param>
    /// <param name="result">When this method returns, contains an object of type
    /// <see cref="global::MyTestNameSpace.MyEnum" /> whose
    /// value is represented by <paramref name="result"/> if the parse operation succeeds.
    /// If the parse operation fails, contains the default value of the underlying type
    /// of <see cref="global::MyTestNameSpace.MyEnum" />. This parameter is passed uninitialized.</param>
    /// <param name="ignoreCase"><see langword="true" /> to read value in case insensitive mode; <see langword="false" /> to read value in case sensitive mode.</param>
    /// <param name="allowMatchingMetadataAttribute">If <see langword="true" />, considers the value included in metadata attributes such as
    /// <c>[Display]</c>/<c>[Description]</c> attribute when parsing, otherwise only considers the member names.</param>
    /// <returns><see langword="true" /> if the value parameter was converted successfully; otherwise, <see langword="false" />.</returns>
    public static bool TryParse(
        in global::System.ReadOnlySpan<char> name,
        out global::MyTestNameSpace.MyEnum result,
        bool ignoreCase,
        bool allowMatchingMetadataAttribute)
    {
        if (ignoreCase)
        {
            switch (name)
            {
                case var current when global::System.MemoryExtensions.Equals(current, "First".AsSpan(), global::System.StringComparison.OrdinalIgnoreCase):
                    result = global::MyTestNameSpace.MyEnum.First;
                    return true;
                case var current when global::System.MemoryExtensions.Equals(current, "Second".AsSpan(), global::System.StringComparison.OrdinalIgnoreCase):
                    result = global::MyTestNameSpace.MyEnum.Second;
                    return true;
                case { IsEmpty: false } when int.TryParse(name, out var numericResult):
                    result = (global::MyTestNameSpace.MyEnum)numericResult;
                    return true;
                default:
                    result = default;
                    return false;
            }
        }

        switch (name)
        {
            case var current when global::System.MemoryExtensions.Equals(current, "First".AsSpan(), global::System.StringComparison.Ordinal):
                result = global::MyTestNameSpace.MyEnum.First;
                return true;
            case var current when global::System.MemoryExtensions.Equals(current, "Second".AsSpan(), global::System.StringComparison.Ordinal):
                result = global::MyTestNameSpace.MyEnum.Second;
                return true;
            case { IsEmpty: false } when int.TryParse(name, out var numericResult):
                result = (global::MyTestNameSpace.MyEnum)numericResult;
                return true;
            default:
                result = default;
                return false;
        }
    }

    /// <summary>
    /// Retrieves an array of the metadata or <see langword="default" /> values of the members defined in
    /// <see cref="global::MyTestNameSpace.MyEnum" />.
    /// Note that this returns a new array with every invocation, so
    /// should be cached if appropriate.
    /// </summary>
    /// <returns>An array of the metadata or <see langword="default" /> values defined in <see cref="global::MyTestNameSpace.MyEnum" />.</returns>
    public static string[] GetMetadataNamesOrDefault() =>
        new[]
        {
            nameof(global::MyTestNameSpace.MyEnum.First),
            nameof(global::MyTestNameSpace.MyEnum.Second),
        };

    /// <summary>
    /// Gets the <see cref="global::MyTestNameSpace.MyEnum" /> representation of the <paramref name="name"/>
    /// or <see langword="default" /> if there's no match.
    /// </summary>
    /// <param name="name">The value that should be matched.</param>
    /// <returns>The matching <see cref="global::MyTestNameSpace.MyEnum" /> or <see langword="null" /> if there was no match.</returns>
    public static global::MyTestNameSpace.MyEnum? GetValueOrDefault(string? name) =>
        TryParse(name, out global::MyTestNameSpace.MyEnum value) ? value : null;

    /// <summary>
    /// Gets the <see cref="global::MyTestNameSpace.MyEnum" /> representation of the <paramref name="name"/>
    /// or <see langword="default" /> if there's no match.
    /// </summary>
    /// <param name="name">The value that should be matched.</param>
    /// <returns>The matching <see cref="global::MyTestNameSpace.MyEnum" /> or <see langword="null" /> if there was no match.</returns>
    public static global::MyTestNameSpace.MyEnum? GetValueOrDefault(in global::System.ReadOnlySpan<char> name) =>
        TryParse(name, out global::MyTestNameSpace.MyEnum value) ? value : null;

    /// <summary>
    /// Gets the <see cref="global::MyTestNameSpace.MyEnum" /> representation of the <paramref name="name"/>
    /// or <see langword="default" /> if there's no match.
    /// </summary>
    /// <param name="name">The value that should be matched.</param>
    /// <param name="ignoreCase"><see langword="true" /> to read value in case insensitive mode;
    /// <see langword="false" /> to read value in case sensitive mode.</param>
    /// <returns>The matching <see cref="global::MyTestNameSpace.MyEnum" /> or <see langword="null" /> if there was no match.</returns>
    public static global::MyTestNameSpace.MyEnum? GetValueOrDefault(string? name, bool ignoreCase) =>
        TryParse(name, out global::MyTestNameSpace.MyEnum value, ignoreCase) ? value : null;

    /// <summary>
    /// Gets the <see cref="global::MyTestNameSpace.MyEnum" /> representation of the <paramref name="name"/>
    /// or <see langword="default" /> if there's no match.
    /// </summary>
    /// <param name="name">The value that should be matched.</param>
    /// <param name="ignoreCase"><see langword="true" /> to read value in case insensitive mode;
    /// <see langword="false" /> to read value in case sensitive mode.</param>
    /// <returns>The matching <see cref="global::MyTestNameSpace.MyEnum" /> or <see langword="null" /> if there was no match.</returns>
    public static global::MyTestNameSpace.MyEnum? GetValueOrDefault(in global::System.ReadOnlySpan<char> name, bool ignoreCase) =>
        TryParse(name, out global::MyTestNameSpace.MyEnum value, ignoreCase) ? value : null;

    /// <summary>
    /// Gets the <see cref="global::MyTestNameSpace.MyEnum" /> representation of the <paramref name="name"/>
    /// or <see langword="default" /> if there's no match.
    /// </summary>
    /// <param name="name">The value that should be matched.</param>
    /// <param name="ignoreCase"><see langword="true" /> to read value in case insensitive mode;
    /// <see langword="false" /> to read value in case sensitive mode.</param>
    /// <param name="allowMatchingMetadataAttribute">If <see langword="true" />,
    /// considers the value of metadata attributes, otherwise ignores them.</param>
    /// <returns>The matching <see cref="global::MyTestNameSpace.MyEnum" /> or <see langword="null" /> if there was no match.</returns>
    public static global::MyTestNameSpace.MyEnum? GetValueOrDefault(string? name, bool ignoreCase, bool allowMatchingMetadataAttribute) =>
        TryParse(name, out global::MyTestNameSpace.MyEnum value, ignoreCase, allowMatchingMetadataAttribute) ? value : null;

    /// <summary>
    /// Gets the <see cref="global::MyTestNameSpace.MyEnum" /> representation of the <paramref name="name"/>
    /// or <see langword="default" /> if there's no match.
    /// </summary>
    /// <param name="name">The value that should be matched.</param>
    /// <param name="ignoreCase"><see langword="true" /> to read value in case insensitive mode;
    /// <see langword="false" /> to read value in case sensitive mode.</param>
    /// <param name="allowMatchingMetadataAttribute">If <see langword="true" />,
    /// considers the value of metadata attributes, otherwise ignores them.</param>
    /// <returns>The matching <see cref="global::MyTestNameSpace.MyEnum" /> or <see langword="null" /> if there was no match.</returns>
    public static global::MyTestNameSpace.MyEnum? GetValueOrDefault(in global::System.ReadOnlySpan<char> name, bool ignoreCase, bool allowMatchingMetadataAttribute) =>
        TryParse(name, out global::MyTestNameSpace.MyEnum value, ignoreCase, allowMatchingMetadataAttribute) ? value : null;

    /// <summary>
    /// Retrieves an array of the values of the members defined in
    /// <see cref="global::MyTestNameSpace.MyEnum" />.
    /// Note that this returns a new array with every invocation, so
    /// should be cached if appropriate.
    /// </summary>
    /// <returns>An array of the values defined in <see cref="global::MyTestNameSpace.MyEnum" />.</returns>
    public static global::MyTestNameSpace.MyEnum[] GetValues() =>
        new[]
        {
            global::MyTestNameSpace.MyEnum.First,
            global::MyTestNameSpace.MyEnum.Second,
        };

    /// <summary>
    /// Retrieves an array of the names of the members defined in
    /// <see cref="global::MyTestNameSpace.MyEnum" />.
    /// Note that this returns a new array with every invocation, so
    /// should be cached if appropriate.
    /// </summary>
    /// <returns>An array of the names of the members defined in <see cref="global::MyTestNameSpace.MyEnum" />.</returns>
    public static string[] GetNames() =>
        new[]
        {
            nameof(global::MyTestNameSpace.MyEnum.First),
            nameof(global::MyTestNameSpace.MyEnum.Second),
        };
}
