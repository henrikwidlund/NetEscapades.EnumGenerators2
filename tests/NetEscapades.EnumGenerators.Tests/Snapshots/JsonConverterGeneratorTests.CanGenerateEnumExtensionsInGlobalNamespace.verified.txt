//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the NetEscapades.EnumGenerators source generator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

/// <summary>
/// Converts a <see cref="MyEnum" /> to or from JSON.
/// </summary>
public sealed class MyEnumConverter : global::System.Text.Json.Serialization.JsonConverter<MyEnum>
{
     private const string PropertyName = "bla";

     /// <inheritdoc />
     /// <summary>
     /// Read and convert the JSON to <see cref="MyEnum" />.
     /// </summary>
     /// <remarks>
     /// A converter may throw any Exception, but should throw <see cref="global::System.Text.Json.JsonException" /> when the JSON is invalid.
     /// </remarks>
     public override MyEnum Read(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
     {
         var value = reader.GetString();
         if (MyEnumExtensions.TryParse(value, out var enumValue, true, true))
            return enumValue;

         throw new global::System.Text.Json.JsonException($"{value} is not a valid value.", PropertyName, null, null);
     }

     /// <inheritdoc />
     public override void Write(global::System.Text.Json.Utf8JsonWriter writer, MyEnum value, global::System.Text.Json.JsonSerializerOptions options)
         => writer.WriteStringValue(MyEnumExtensions.ToStringFast(value));
}
